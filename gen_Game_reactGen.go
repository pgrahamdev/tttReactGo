// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

type GameElem struct {
	react.Element
}

func buildGame(cd react.ComponentDef) react.Component {
	return GameDef{ComponentDef: cd}
}

func buildGameElem(children ...react.Element) *GameElem {
	return &GameElem{
		Element: react.CreateElement(buildGame, nil, children...),
	}
}

func (g GameDef) RendersElement() react.Element {
	return g.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Game component.  SetState does not immediately mutate g.State()
// but creates a pending state transition.
func (g GameDef) SetState(state GameState) {
	g.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Game component
func (g GameDef) State() GameState {
	return g.ComponentDef.State().(GameState)
}

// IsState is an auto-generated definition so that GameState implements
// the myitcv.io/react.State interface.
func (g GameState) IsState() {}

var _ react.State = GameState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (g GameDef) GetInitialStateIntf() react.State {
	return g.GetInitialState()
}

func (g GameState) EqualsIntf(val react.State) bool {
	return g.Equals(val.(GameState))
}
